import { GetStaticPaths } from "next";
import { GradeResponse, PL3 } from "../../../types";
import {
  Box,
  Container,
  Heading,
  VStack,
  Text,
  Button,
} from "@chakra-ui/react";
import React, { useState } from "react";
import { NewInput } from "../../../components/NewInput";
import { getPublicData, postPublicData } from "../../../utils/NetworkUtils";
import DefaultContainer from "../../../components/common/DefaultContainer";
import Head from "next/head";
import TitleHeading from "../../../components/common/TitleHeading";
import { prettify } from "../../../components/common/Formula";

export interface PL3PageProps {
  exercise: PL3;
}

function PL3ExercisePage({ exercise }: PL3PageProps) {
  const [currentFormula, setCurrentFormula] = useState<string>(
    exercise.formula
  );
  const [complete, setComplete] = useState<Boolean>(false);

  interface Expression {
    expression: string;
  }

  const checkFormula = async (formula: string) => {
    let data: Expression = { expression: formula };
    const isValid = await postPublicData<Boolean>(
      `/api/exercises/${exercise.id}/validator`,
      data
    );
    return isValid;
  };

  const handleClick = async (event: React.MouseEvent<HTMLButtonElement>) => {
    const but: HTMLElement = event.currentTarget;
    const butDiv: HTMLElement = but.parentElement!;
    const parentDiv: HTMLElement = butDiv.parentElement!;
    const input: HTMLElement = parentDiv.firstChild as HTMLElement;

    try {
      // check if written formula is equivalent to formula before
      const val: string = event.currentTarget.value;
      if (val === currentFormula) {
        throw new Error("New formula is equal to the previous one.");
      }
      const bool = await checkFormula(val);

      if (bool) {
        // remove check button from input before and disable input
        but.remove();
        input.style.pointerEvents = "none";

        // add new input
        const aux = inputList;
        aux.push(<NewInput key={inputList.length} handleClick={handleClick} />);
        setInputList([...aux]);
        setCurrentFormula(val);
      } else {
        window.alert("Formula submitted is not equivalent to previous one!");
      }
    } catch (e) {
      if (e instanceof Error) {
        console.log("error: " + e.message);
        window.alert(e.message);
      }
    }
  };

  const [inputList, setInputList] = useState<React.ReactElement[]>([
    <NewInput key={0} handleClick={handleClick} />,
  ]);

  interface SubmitData {
    student: string;
    answer: string;
  }

  const checkNormalForm = async (formula: string) => {
    let data: SubmitData = { answer: formula, student: "guest_user" };
    const grade = await postPublicData<GradeResponse>(
      `/api/exercises/${exercise.id}/grades`,
      data
    );
    console.log(grade);
    return grade;
  };

  const handleSubmit = async () => {
    const grade: GradeResponse = await checkNormalForm(currentFormula);
    if (grade.errors[0]) {
      //exercise is incorrect!
      alert(grade.feedback);
    } else {
      //exercise is correct!
      setComplete(true);
    }
  };

  return (
    <>
      <Head>
        <title>Exercise {exercise.id}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <DefaultContainer>
        <TitleHeading
          title={"Exercise page for: " + prettify(exercise.formula)}
        ></TitleHeading>

        <VStack>
          <Box w={"full"} maxW={"400px"} p={5} bg={"white"} rounded={"md"}>
            {inputList}
          </Box>
          {exercise.complexity === 0 && (
            <Box>
              <Text>Goal Formula: {prettify(exercise.endFormula)}</Text>
            </Box>
          )}
          <Box p={5}>
            {!complete ? (
              <Button onClick={handleSubmit}>
                Finish task: {exercise.normalForm} reached
              </Button>
            ) : (
              <Heading>Answer is correct!</Heading>
            )}
          </Box>
        </VStack>
      </DefaultContainer>
    </>
  );
}

export const getStaticPaths: GetStaticPaths = async () => {
  const exercises: PL3[] = await getPublicData<PL3[]>(
    "/api/exercises?exType=PL3"
  );

  return {
    paths: exercises.map((exercise) => {
      return { params: { id: String(exercise.id) } };
    }),
    fallback: true,
  };
};

export async function getStaticProps({ params }: { params: any }) {
  const url = process.env.BASE_URL + `/api/exercises/${params.id}`;

  const res = await fetch(url);
  const exercise = await res.json();

  return {
    props: {
      exercise,
    },
  };
}

export default PL3ExercisePage;
