import { useRouter } from "next/router";
import { GetStaticPaths } from "next";
import { GradeResponse, PL1, Scenario } from "../../types";
import {
  Text,
  Heading,
  List,
  ListItem,
  Flex,
  Box,
  Center,
  AccordionItem,
  Accordion,
  AccordionButton,
  AccordionIcon,
  AccordionPanel,
  Button,
} from "@chakra-ui/react";
import Head from "next/head";
import FormulaTyper from "../../components/FormulaTyper";
import { useEffect, useState } from "react";
import { useAuth } from "../../contexts/auth";
import {
  deletePrivateData,
  getPublicData,
  postPublicData,
} from "../../utils/NetworkUtils";
import RoundedBoxClear from "../../components/common/RoundedBoxClear";
import TitleHeading from "../../components/common/TitleHeading";
import DefaultContainer from "../../components/common/DefaultContainer";
import NoExercisesAvailable from "../../components/templates/NoExercisesAvailable";

import Draggable from "react-draggable"; // The default
import React from "react";

export interface EquivalenceData {
  expression1: string;
  expression2: string;
}

interface ScenarioPageProps {
  scenario: Scenario;
}

function ScenarioPage({ scenario }: ScenarioPageProps) {
  const router = useRouter();
  const { id } = router.query;

  const { isAdmin, user } = useAuth();

  const psymbols: string[] = Object.keys(scenario.map);
  const phrases: string[] = Object.values(scenario.map);

  const [current, setCurrent] = useState<PL1 | null>(null);
  const [errors, setErrors] = useState<number[]>(
    new Array(scenario.exercises.length).fill(-1)
  );

  useEffect(() => {
    if (!scenario) {
      console.error("Current scenario is null.");
      router.push("/scenarios");
    } else {
      if (scenario.exercises.length > 0) {
        setCurrent(scenario.exercises[0]);
      }
    }
  }, []);

  const handleDelete = async () => {
    await deletePrivateData(`/api/scenarios/${id}`).then(() =>
      router.push("/scenarios")
    );
  };

  const handleSubmit = async (event: React.MouseEvent<HTMLButtonElement>) => {
    const eventTarget: string = (event.currentTarget as HTMLButtonElement)
      .value;

    const data: { student: string; answer: string } = {
      student: user != null ? user.username : "guest_user",
      answer: eventTarget,
    };
    console.log(data);
    //await gradeExercise(data);
    scenario.exercises.map((exercise, index) => {
      if (exercise.id === current?.id) {
        const aux = errors;
        aux[index] = 1;
        setErrors([...aux]);
      }
    });
  };

  const gradeExercise = async (data: { student: string; answer: string }) => {
    await postPublicData<GradeResponse>(
      `/api/exercises/${current?.id}/grades`,
      data
    ).then((grade) => {
      console.log(grade);
      if (grade.grade == 100) {
        scenario.exercises.map((exercise, index) => {
          if (exercise.id === current?.id) {
            const aux = errors;
            aux[index] = 1;
            setErrors([...aux]);
          }
        });
      } else {
        scenario.exercises.map((exercise, index) => {
          if (exercise.id === current?.id) {
            const aux = errors;
            aux[index] = 0;
            setErrors([...aux]);
          }
        });
      }
    });
  };

  const getBackgroundColor = (value: number) => {
    let color;
    if (value === -1) {
      color = "white";
    } else if (value === 0) {
      color = "#DC143C";
    } else if (value === 1) color = "#228B22";
    return color;
  };

  const AccordionItemCustom = ({
    index,
    exercise,
  }: {
    index: number;
    exercise: PL1;
  }) => {
    return (
      <AccordionItem key={index}>
        <AccordionButton onClick={() => setCurrent(exercise)}>
          <Box flex="1" textAlign="left">
            {exercise.phrase}
          </Box>
          <AccordionIcon />
        </AccordionButton>
        <AccordionPanel
          background={getBackgroundColor(errors[index])}
          pt={4}
          pb={4}
        >
          <Center>
            {errors[index] !== 1 ? (
              <FormulaTyper data={psymbols} onSubmit={handleSubmit} />
            ) : (
              <Heading color={"white"}>Answer is correct!</Heading>
            )}
          </Center>
        </AccordionPanel>
      </AccordionItem>
    );
  };

  return (
    <>
      <Head>
        <title>Scenario {id}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <DefaultContainer>
        <TitleHeading title={"Scenario page for: " + scenario.name} />

        <Draggable
          defaultPosition={{ x: 0, y: 0 }}
          handle=".handle"
          grid={[25, 25]}
        >
          <div className="handle">
            <RoundedBoxClear>
              <List spacing={2}>
                {psymbols.map((value, index) => {
                  return (
                    <ListItem key={index}>
                      <Flex>
                        <Text style={{ fontWeight: "bold" }}>{value} </Text> -{" "}
                        {phrases.at(index)}
                      </Flex>
                    </ListItem>
                  );
                })}
              </List>
            </RoundedBoxClear>
          </div>
        </Draggable>

        <TitleHeading title="Exercise list:" />

        {scenario.exercises && scenario.exercises.length > 0 ? (
          <Accordion width={"full"} defaultIndex={[0]}>
            {scenario.exercises.map((e, index) => {
              return (
                <AccordionItemCustom key={index} index={index} exercise={e} />
              );
            })}
          </Accordion>
        ) : (
          <NoExercisesAvailable />
        )}

        {isAdmin && (
          <Button mt={10} onClick={handleDelete}>
            Delete Scenario
          </Button>
        )}
      </DefaultContainer>
    </>
  );
}

export const getStaticPaths: GetStaticPaths = async () => {
  const scenarios: Scenario[] = await getPublicData<Scenario[]>(
    "/api/scenarios/"
  );
  const paths = scenarios.map((scenario) => {
    return { params: { id: String(scenario.id) } };
  });
  return {
    paths,
    fallback: false,
  };
};

export async function getStaticProps({ params }: { params: { id: string } }) {
  const scenario: Scenario = await getPublicData<Scenario>(
    `/api/scenarios/${params.id}`
  );
  return {
    props: { scenario: scenario },
  };
}

export default ScenarioPage;
