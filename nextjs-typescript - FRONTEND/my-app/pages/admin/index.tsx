import Head from "next/head";
import PL1Form from "../../components/forms/PL1Form";
import { useAuth } from "../../contexts/auth";
import { Box, VStack } from "@chakra-ui/react";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import ScenarioForm from "../../components/forms/ScenarioForm";
import { Scenario } from "../../types";
import PL2Form from "../../components/forms/PL2Form";
import PL3Form from "../../components/forms/PL3Form";
import Loading from "../../components/templates/Loading";
import { getPublicData } from "../../utils/NetworkUtils";
import PL4Form from "../../components/forms/PL4From";
import FileForm from "../../components/forms/FileForm";
import DefaultContainer from "../../components/common/DefaultContainer";
import TitleHeading from "../../components/common/TitleHeading";

export interface AdminPageProps {
  scenarios: Scenario[];
}

const Admin = ({ scenarios }: AdminPageProps) => {
  const router = useRouter();

  const { user, loading, isAdmin } = useAuth();
  const [formula, setFormula] = useState("");
  const [variables, setVariables] = useState([""]);
  const [adminLoad, setAdminLoad] = useState(true);
  const isAuthenticated = !!user;

  const updateScenario =
    (scenario: Scenario) => (event: React.MouseEvent<HTMLButtonElement>) => {
      event.preventDefault();
      setVariables(Object.keys(scenario.map.keys()));
    };

  const handleSubmit = (event: React.MouseEvent<HTMLButtonElement>) => {
    const eventTarget: string = (event.currentTarget as HTMLButtonElement)
      .value;
    console.log("Handle Submit: " + eventTarget);
    setFormula(formula.concat(eventTarget));
  };

  const clearFormula = () => {
    navigator.clipboard.writeText(formula);
    setFormula("");
  };

  async function loadScenarioVariables() {
    let sc: Scenario | null = null;

    try {
      const lastScenario: Scenario | undefined = scenarios[0];
      sc = await getPublicData<Scenario>(
        "/api/exercises/scenarios/" + lastScenario?.id
      );
      if (sc != null) {
        setVariables(Object.keys(sc.map.keys()));
      }
      setAdminLoad(false);
    } catch {
      console.error("Error loading scenario variables.");
    }
  }

  useEffect(() => {
    !loading && isAdmin ? router.push("/admin") : router.push("/");
  }, []);

  if (loading) {
    return <Loading />;
  }

  return (
    <>
      <Head>
        <title>Admin Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {isAdmin && isAuthenticated ? (
        <DefaultContainer>
          <TitleHeading title="Welcome to the Admin page!" />
          <VStack spacing={4} w="75%">
            <Box w="full">
              <ScenarioForm user={user} />
            </Box>
            <Box w="full">
              <PL1Form user={user} />
            </Box>
            <Box w="full">
              <PL2Form user={user} />
            </Box>
            <Box w="full">
              <PL3Form user={user} />
            </Box>
            {/*<Box w="full">
              <PL4Form />
            </Box> */}
            <Box w="full">
              <FileForm user={user} />
            </Box>
          </VStack>
        </DefaultContainer>
      ) : null}
    </>
  );
};

export const getServerSideProps = async () => {
  const scenarios: Scenario[] = await getPublicData<Scenario[]>(
    "/api/scenarios"
  );

  return {
    props: {
      scenarios: scenarios,
    },
  };
};

export default Admin;
